
16_16_bis.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000114  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00800060  00000114  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800260  00800260  000003a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000062f  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000056d  00000000  00000000  00000a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001c6  00000000  00000000  00000fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030e  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000d2  00000000  00000000  00001502  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 00 	call	0xce	; 0xce <main>
  8a:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_2>:
{0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};

ISR(INT1_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	state = 1 - state;
  a4:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <__data_end>
  a8:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <__data_end+0x1>
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	82 1b       	sub	r24, r18
  b2:	93 0b       	sbc	r25, r19
  b4:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <__data_end+0x1>
  b8:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <__data_end>
}
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	3f 91       	pop	r19
  c2:	2f 91       	pop	r18
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <main>:

int main(void)
{
	/* Replace with your application code */
	
	DDRA = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  d2:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b00000000;
  d4:	11 ba       	out	0x11, r1	; 17
			int temp;
			c++;
			c=c%400;
			int f=0;
			
			PORTB = 0b00000000;
  d6:	18 ba       	out	0x18, r1	; 24
  d8:	a8 ee       	ldi	r26, 0xE8	; 232
  da:	b3 e0       	ldi	r27, 0x03	; 3
  dc:	60 e6       	ldi	r22, 0x60	; 96
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	fb 01       	movw	r30, r22
  e4:	80 e0       	ldi	r24, 0x00	; 0
			for(int k=0;k<1000;k++)
			for(int i=0;i<16;i++){
				for(int j=0;j<16;j++){
					if(pattern[i][j]==1){
  e6:	21 91       	ld	r18, Z+
  e8:	31 91       	ld	r19, Z+
  ea:	21 30       	cpi	r18, 0x01	; 1
  ec:	31 05       	cpc	r19, r1
  ee:	29 f4       	brne	.+10     	; 0xfa <main+0x2c>
						PORTA = i;
  f0:	4b bb       	out	0x1b, r20	; 27
						PORTB = j;
  f2:	88 bb       	out	0x18, r24	; 24
						PORTB = PORTB & 0b00111111;
  f4:	98 b3       	in	r25, 0x18	; 24
  f6:	9f 73       	andi	r25, 0x3F	; 63
  f8:	98 bb       	out	0x18, r25	; 24
  fa:	8f 5f       	subi	r24, 0xFF	; 255
			int f=0;
			
			PORTB = 0b00000000;
			for(int k=0;k<1000;k++)
			for(int i=0;i<16;i++){
				for(int j=0;j<16;j++){
  fc:	80 31       	cpi	r24, 0x10	; 16
  fe:	99 f7       	brne	.-26     	; 0xe6 <main+0x18>
 100:	60 5e       	subi	r22, 0xE0	; 224
 102:	7f 4f       	sbci	r23, 0xFF	; 255
 104:	4f 5f       	subi	r20, 0xFF	; 255
			c=c%400;
			int f=0;
			
			PORTB = 0b00000000;
			for(int k=0;k<1000;k++)
			for(int i=0;i<16;i++){
 106:	40 31       	cpi	r20, 0x10	; 16
 108:	61 f7       	brne	.-40     	; 0xe2 <main+0x14>
 10a:	11 97       	sbiw	r26, 0x01	; 1
			c++;
			c=c%400;
			int f=0;
			
			PORTB = 0b00000000;
			for(int k=0;k<1000;k++)
 10c:	21 f3       	breq	.-56     	; 0xd6 <main+0x8>
 10e:	e6 cf       	rjmp	.-52     	; 0xdc <main+0xe>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
