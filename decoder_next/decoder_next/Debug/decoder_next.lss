
decoder_next.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000160  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00800060  00000160  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800160  00800160  000002f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000650  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000572  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001e2  00000000  00000000  00000f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000112c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000314  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000116  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000015aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 00 	call	0xce	; 0xce <main>
  8a:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_2>:
{1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1},
{1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1},
{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
};

ISR(INT1_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	state = 1 - state;
  a4:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <__data_end>
  a8:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <__data_end+0x1>
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	82 1b       	sub	r24, r18
  b2:	93 0b       	sbc	r25, r19
  b4:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__data_end+0x1>
  b8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
}
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	3f 91       	pop	r19
  c2:	2f 91       	pop	r18
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <main>:

int main(void)
{
	/* Replace with your application code */
	
	DDRA = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  d2:	87 bb       	out	0x17, r24	; 23
  d4:	c0 e6       	ldi	r28, 0x60	; 96
  d6:	d0 e0       	ldi	r29, 0x00	; 0
  d8:	00 e6       	ldi	r16, 0x60	; 96
  da:	11 e0       	ldi	r17, 0x01	; 1
				pattern[i][0] = temp;
			}
			for(int k=0;k<1000;k++)
			for(int i=0;i<8;i++){
				
				PORTA = 1<<i;
  dc:	a1 e0       	ldi	r26, 0x01	; 1
  de:	b0 e0       	ldi	r27, 0x00	; 0
	state = 1 - state;
}


int main(void)
{
  e0:	20 e6       	ldi	r18, 0x60	; 96
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	a9 01       	movw	r20, r18
		
			// right shift
			int temp;
			
			for (int i = 0; i < 8; i++) {
				temp = pattern[i][7];
  e6:	f9 01       	movw	r30, r18
  e8:	66 85       	ldd	r22, Z+14	; 0x0e
  ea:	77 85       	ldd	r23, Z+15	; 0x0f
  ec:	7e 96       	adiw	r30, 0x1e	; 30
				for (int j = 14; j >= 0; j-- ) {
					pattern[i][j + 1] = pattern[i][j];
  ee:	92 91       	ld	r25, -Z
  f0:	82 91       	ld	r24, -Z
  f2:	93 83       	std	Z+3, r25	; 0x03
  f4:	82 83       	std	Z+2, r24	; 0x02
			// right shift
			int temp;
			
			for (int i = 0; i < 8; i++) {
				temp = pattern[i][7];
				for (int j = 14; j >= 0; j-- ) {
  f6:	e2 17       	cp	r30, r18
  f8:	f3 07       	cpc	r31, r19
  fa:	c9 f7       	brne	.-14     	; 0xee <main+0x20>
					pattern[i][j + 1] = pattern[i][j];
				}
				pattern[i][0] = temp;
  fc:	fa 01       	movw	r30, r20
  fe:	71 83       	std	Z+1, r23	; 0x01
 100:	60 83       	st	Z, r22
 102:	20 5e       	subi	r18, 0xE0	; 224
 104:	3f 4f       	sbci	r19, 0xFF	; 255
		
		
			// right shift
			int temp;
			
			for (int i = 0; i < 8; i++) {
 106:	02 17       	cp	r16, r18
 108:	13 07       	cpc	r17, r19
 10a:	61 f7       	brne	.-40     	; 0xe4 <main+0x16>
 10c:	0f 2e       	mov	r0, r31
 10e:	f8 ee       	ldi	r31, 0xE8	; 232
 110:	ef 2e       	mov	r14, r31
 112:	f3 e0       	ldi	r31, 0x03	; 3
 114:	ff 2e       	mov	r15, r31
 116:	f0 2d       	mov	r31, r0
 118:	be 01       	movw	r22, r28
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	50 e0       	ldi	r21, 0x00	; 0
				pattern[i][0] = temp;
			}
			for(int k=0;k<1000;k++)
			for(int i=0;i<8;i++){
				
				PORTA = 1<<i;
 11e:	cd 01       	movw	r24, r26
 120:	04 2e       	mov	r0, r20
 122:	02 c0       	rjmp	.+4      	; 0x128 <main+0x5a>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <main+0x56>
 12c:	8b bb       	out	0x1b, r24	; 27
 12e:	fb 01       	movw	r30, r22
 130:	80 e0       	ldi	r24, 0x00	; 0
				for(int j=0;j<16;j++){
					if(pattern[i][j]==1){
 132:	21 91       	ld	r18, Z+
 134:	31 91       	ld	r19, Z+
 136:	21 30       	cpi	r18, 0x01	; 1
 138:	31 05       	cpc	r19, r1
 13a:	09 f4       	brne	.+2      	; 0x13e <main+0x70>
					PORTB = j;
 13c:	88 bb       	out	0x18, r24	; 24
 13e:	8f 5f       	subi	r24, 0xFF	; 255
			}
			for(int k=0;k<1000;k++)
			for(int i=0;i<8;i++){
				
				PORTA = 1<<i;
				for(int j=0;j<16;j++){
 140:	80 31       	cpi	r24, 0x10	; 16
 142:	b9 f7       	brne	.-18     	; 0x132 <main+0x64>
					pattern[i][j + 1] = pattern[i][j];
				}
				pattern[i][0] = temp;
			}
			for(int k=0;k<1000;k++)
			for(int i=0;i<8;i++){
 144:	4f 5f       	subi	r20, 0xFF	; 255
 146:	5f 4f       	sbci	r21, 0xFF	; 255
 148:	60 5e       	subi	r22, 0xE0	; 224
 14a:	7f 4f       	sbci	r23, 0xFF	; 255
 14c:	48 30       	cpi	r20, 0x08	; 8
 14e:	51 05       	cpc	r21, r1
 150:	31 f7       	brne	.-52     	; 0x11e <main+0x50>
 152:	f1 e0       	ldi	r31, 0x01	; 1
 154:	ef 1a       	sub	r14, r31
 156:	f1 08       	sbc	r15, r1
				for (int j = 14; j >= 0; j-- ) {
					pattern[i][j + 1] = pattern[i][j];
				}
				pattern[i][0] = temp;
			}
			for(int k=0;k<1000;k++)
 158:	f9 f6       	brne	.-66     	; 0x118 <main+0x4a>
 15a:	c2 cf       	rjmp	.-124    	; 0xe0 <main+0x12>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
