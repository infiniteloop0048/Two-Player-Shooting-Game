
exp_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  0000016c  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000e0  008000e0  00000280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000674  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000572  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001ec  00000000  00000000  00000efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000010e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000306  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000154  00000000  00000000  00001442  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00001596  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3e       	cpi	r26, 0xE0	; 224
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ee       	ldi	r26, 0xE0	; 224
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3e       	cpi	r26, 0xE2	; 226
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 00 	call	0xce	; 0xce <main>
  8a:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_2>:
{0,0,0,0,0,1,0,0},
{0,0,0,0,0,1,0,0},
{0,0,1,1,1,1,0,0}
};

ISR(INT1_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	state = 1 - state;
  a4:	20 91 e0 00 	lds	r18, 0x00E0	; 0x8000e0 <__data_end>
  a8:	30 91 e1 00 	lds	r19, 0x00E1	; 0x8000e1 <__data_end+0x1>
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	82 1b       	sub	r24, r18
  b2:	93 0b       	sbc	r25, r19
  b4:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <__data_end+0x1>
  b8:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
}
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	3f 91       	pop	r19
  c2:	2f 91       	pop	r18
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <main>:

int main(void)
{
	/* Replace with your application code */
	
	DDRA = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  d2:	87 bb       	out	0x17, r24	; 23
  d4:	00 e6       	ldi	r16, 0x60	; 96
  d6:	10 e0       	ldi	r17, 0x00	; 0
  d8:	0f 2e       	mov	r0, r31
  da:	f0 ee       	ldi	r31, 0xE0	; 224
  dc:	cf 2e       	mov	r12, r31
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	df 2e       	mov	r13, r31
  e2:	f0 2d       	mov	r31, r0
		
		for (int k = 0; k < 1000; k++){
			for(int i=0;i<8;i++){
				for(int j=0;j<8;j++){
					if(pattern[i][j] == 1){
						char a = (1 << i);
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	70 e0       	ldi	r23, 0x00	; 0
	state = 1 - state;
}


int main(void)
{
  e8:	a0 e6       	ldi	r26, 0x60	; 96
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	ed 01       	movw	r28, r26
	{
		
			int temp;
			
			for (int i = 0; i < 8; i++) {
				temp = pattern[i][7];
  ee:	1e 96       	adiw	r26, 0x0e	; 14
  f0:	2d 91       	ld	r18, X+
  f2:	3c 91       	ld	r19, X
  f4:	1f 97       	sbiw	r26, 0x0f	; 15
  f6:	fd 01       	movw	r30, r26
  f8:	3e 96       	adiw	r30, 0x0e	; 14
				for (int j = 6; j >= 0; j-- ) {
					pattern[i][j + 1] = pattern[i][j];
  fa:	92 91       	ld	r25, -Z
  fc:	82 91       	ld	r24, -Z
  fe:	93 83       	std	Z+3, r25	; 0x03
 100:	82 83       	std	Z+2, r24	; 0x02
		
			int temp;
			
			for (int i = 0; i < 8; i++) {
				temp = pattern[i][7];
				for (int j = 6; j >= 0; j-- ) {
 102:	ae 17       	cp	r26, r30
 104:	bf 07       	cpc	r27, r31
 106:	c9 f7       	brne	.-14     	; 0xfa <main+0x2c>
					pattern[i][j + 1] = pattern[i][j];
				}
				pattern[i][0] = temp;
 108:	39 83       	std	Y+1, r19	; 0x01
 10a:	28 83       	st	Y, r18
 10c:	50 96       	adiw	r26, 0x10	; 16
	while (1)
	{
		
			int temp;
			
			for (int i = 0; i < 8; i++) {
 10e:	ca 16       	cp	r12, r26
 110:	db 06       	cpc	r13, r27
 112:	61 f7       	brne	.-40     	; 0xec <main+0x1e>
 114:	c8 ee       	ldi	r28, 0xE8	; 232
 116:	d3 e0       	ldi	r29, 0x03	; 3
 118:	d8 01       	movw	r26, r16
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	50 e0       	ldi	r21, 0x00	; 0
		
		for (int k = 0; k < 1000; k++){
			for(int i=0;i<8;i++){
				for(int j=0;j<8;j++){
					if(pattern[i][j] == 1){
						char a = (1 << i);
 11e:	f6 2e       	mov	r15, r22
 120:	04 2e       	mov	r0, r20
 122:	01 c0       	rjmp	.+2      	; 0x126 <main+0x58>
 124:	ff 0c       	add	r15, r15
 126:	0a 94       	dec	r0
 128:	ea f7       	brpl	.-6      	; 0x124 <main+0x56>
 12a:	fd 01       	movw	r30, r26
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
			}
		
		for (int k = 0; k < 1000; k++){
			for(int i=0;i<8;i++){
				for(int j=0;j<8;j++){
					if(pattern[i][j] == 1){
 130:	21 91       	ld	r18, Z+
 132:	31 91       	ld	r19, Z+
 134:	21 30       	cpi	r18, 0x01	; 1
 136:	31 05       	cpc	r19, r1
 138:	51 f4       	brne	.+20     	; 0x14e <main+0x80>
						char a = (1 << i);
						char b = (1 << j);
						PORTA = a;
 13a:	fb ba       	out	0x1b, r15	; 27
						PORTB = ~b;
 13c:	9b 01       	movw	r18, r22
 13e:	08 2e       	mov	r0, r24
 140:	02 c0       	rjmp	.+4      	; 0x146 <main+0x78>
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <main+0x74>
 14a:	20 95       	com	r18
 14c:	28 bb       	out	0x18, r18	; 24
				pattern[i][0] = temp;
			}
		
		for (int k = 0; k < 1000; k++){
			for(int i=0;i<8;i++){
				for(int j=0;j<8;j++){
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	88 30       	cpi	r24, 0x08	; 8
 152:	91 05       	cpc	r25, r1
 154:	69 f7       	brne	.-38     	; 0x130 <main+0x62>
				}
				pattern[i][0] = temp;
			}
		
		for (int k = 0; k < 1000; k++){
			for(int i=0;i<8;i++){
 156:	4f 5f       	subi	r20, 0xFF	; 255
 158:	5f 4f       	sbci	r21, 0xFF	; 255
 15a:	50 96       	adiw	r26, 0x10	; 16
 15c:	48 30       	cpi	r20, 0x08	; 8
 15e:	51 05       	cpc	r21, r1
 160:	f1 f6       	brne	.-68     	; 0x11e <main+0x50>
 162:	21 97       	sbiw	r28, 0x01	; 1
					pattern[i][j + 1] = pattern[i][j];
				}
				pattern[i][0] = temp;
			}
		
		for (int k = 0; k < 1000; k++){
 164:	c9 f6       	brne	.-78     	; 0x118 <main+0x4a>
 166:	c0 cf       	rjmp	.-128    	; 0xe8 <main+0x1a>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
