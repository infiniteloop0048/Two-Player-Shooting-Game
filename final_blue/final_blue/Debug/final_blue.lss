
final_blue.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  000001bc  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000880  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000656  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003be  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a9  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a6  00000000  00000000  000019e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3c       	cpi	r26, 0xC0	; 192
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  7a:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z10USART_initv>:
#define F_CPU 1000000
#include <util/delay.h>

void USART_init(void)
{
	UCSRA = 0b00000010;  // double speed
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	8b b9       	out	0x0b, r24	; 11
	UCSRB = 0b00011000;  // Enable Tx and Rx, polling
  86:	88 e1       	ldi	r24, 0x18	; 24
  88:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0b10000110;  // Async mode, no parity, 1 stop bit, 				8 data bits
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
	//in double-speed mode, UBRR = clock/(8xbaud rate) - 1
	UBRRH = 0;
  8e:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12; // Baud rate 9600bps, assuming 1MHz clock
  90:	8c e0       	ldi	r24, 0x0C	; 12
  92:	89 b9       	out	0x09, r24	; 9
  94:	08 95       	ret

00000096 <_Z9UART_sendh>:
}

void UART_send(unsigned char data){
	// wait until UDRE flag is set to logic 1
	while ((UCSRA & (1<<UDRE)) == 0x00);
  96:	5d 9b       	sbis	0x0b, 5	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <_Z9UART_sendh>
	UDR = data; // Write character to UDR for transmission
  9a:	8c b9       	out	0x0c, r24	; 12
  9c:	08 95       	ret

0000009e <_Z12UART_receivev>:
}

unsigned char UART_receive(void){
	// Wait until RXC flag is set to logic 1
	while ((UCSRA & (1<<RXC)) == 0x00);
  9e:	5f 9b       	sbis	0x0b, 7	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <_Z12UART_receivev>
	return UDR; // Read the received character from UDR
  a2:	8c b1       	in	r24, 0x0c	; 12
}
  a4:	08 95       	ret

000000a6 <_Z11send_stringPc>:

void send_string(char * str){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
	int i = 0;
	while(str[i] != '\0'){
  ac:	88 81       	ld	r24, Y
  ae:	88 23       	and	r24, r24
  b0:	31 f0       	breq	.+12     	; 0xbe <_Z11send_stringPc+0x18>
  b2:	21 96       	adiw	r28, 0x01	; 1
		UART_send(str[i]);
  b4:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9UART_sendh>
	return UDR; // Read the received character from UDR
}

void send_string(char * str){
	int i = 0;
	while(str[i] != '\0'){
  b8:	89 91       	ld	r24, Y+
  ba:	81 11       	cpse	r24, r1
  bc:	fb cf       	rjmp	.-10     	; 0xb4 <_Z11send_stringPc+0xe>
		UART_send(str[i]);
		i++;
	}
}
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <main>:


int main(void)
{
	DDRA = 0xFF;
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  c8:	87 bb       	out	0x17, r24	; 23
	USART_init(); // initialise USART
  ca:	0e 94 41 00 	call	0x82	; 0x82 <_Z10USART_initv>
	//DDRA = 0b11111110;
	PORTA = 0b00000000;
  ce:	1b ba       	out	0x1b, r1	; 27
			PORTA=0b00000000;
		}
		else if(data=='6'){
			
			//send_string("you are sending 6\n");
			PORTA=0b00000110;
  d0:	0f 2e       	mov	r0, r31
  d2:	f6 e0       	ldi	r31, 0x06	; 6
  d4:	ef 2e       	mov	r14, r31
  d6:	f0 2d       	mov	r31, r0
			PORTA=0b00000000;
		}
		else if(data=='5'){
			
			send_string("you are sending 5\n");
			PORTA=0b00000101;
  d8:	0f 2e       	mov	r0, r31
  da:	f5 e0       	ldi	r31, 0x05	; 5
  dc:	ff 2e       	mov	r15, r31
  de:	f0 2d       	mov	r31, r0
			PORTA=0b00000000;
		}
		else if(data=='4'){
			
			send_string("you are sending 4\n");
			PORTA=0b00000100;
  e0:	04 e0       	ldi	r16, 0x04	; 4
			PORTA=0b00000000;
		}
		else if(data=='3'){
			
			send_string("you are sending 3\n");
			PORTA=0b00000011;
  e2:	13 e0       	ldi	r17, 0x03	; 3
			PORTA=0b00000000;
		}
		else if(data=='2'){
			
			send_string("you are sending 2\n");
			PORTA=0b00000010;
  e4:	d2 e0       	ldi	r29, 0x02	; 2
		unsigned char data = UART_receive();
		
		if(data=='1'){
			
			send_string("you are sending 1\n");
			PORTA=0b00000001;
  e6:	c1 e0       	ldi	r28, 0x01	; 1
	USART_init(); // initialise USART
	//DDRA = 0b11111110;
	PORTA = 0b00000000;
	while (1) {
		
		unsigned char data = UART_receive();
  e8:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z12UART_receivev>
		
		if(data=='1'){
  ec:	81 33       	cpi	r24, 0x31	; 49
  ee:	81 f4       	brne	.+32     	; 0x110 <main+0x4c>
			
			send_string("you are sending 1\n");
  f0:	80 e6       	ldi	r24, 0x60	; 96
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11send_stringPc>
			PORTA=0b00000001;
  f8:	cb bb       	out	0x1b, r28	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	89 ef       	ldi	r24, 0xF9	; 249
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x3c>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x46>
 10a:	00 00       	nop
			_delay_ms(320);
			PORTA=0b00000000;
 10c:	1b ba       	out	0x1b, r1	; 27
 10e:	ec cf       	rjmp	.-40     	; 0xe8 <main+0x24>
		}
		else if(data=='2'){
 110:	82 33       	cpi	r24, 0x32	; 50
 112:	81 f4       	brne	.+32     	; 0x134 <main+0x70>
			
			send_string("you are sending 2\n");
 114:	83 e7       	ldi	r24, 0x73	; 115
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11send_stringPc>
			PORTA=0b00000010;
 11c:	db bb       	out	0x1b, r29	; 27
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	89 ef       	ldi	r24, 0xF9	; 249
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x60>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x6a>
 12e:	00 00       	nop
			_delay_ms(320);
			PORTA=0b00000000;
 130:	1b ba       	out	0x1b, r1	; 27
 132:	da cf       	rjmp	.-76     	; 0xe8 <main+0x24>
		}
		else if(data=='3'){
 134:	83 33       	cpi	r24, 0x33	; 51
 136:	81 f4       	brne	.+32     	; 0x158 <main+0x94>
			
			send_string("you are sending 3\n");
 138:	86 e8       	ldi	r24, 0x86	; 134
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11send_stringPc>
			PORTA=0b00000011;
 140:	1b bb       	out	0x1b, r17	; 27
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	89 ef       	ldi	r24, 0xF9	; 249
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0x84>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x8e>
 152:	00 00       	nop
			_delay_ms(320);
			PORTA=0b00000000;
 154:	1b ba       	out	0x1b, r1	; 27
 156:	c8 cf       	rjmp	.-112    	; 0xe8 <main+0x24>
		}
		else if(data=='4'){
 158:	84 33       	cpi	r24, 0x34	; 52
 15a:	81 f4       	brne	.+32     	; 0x17c <main+0xb8>
			
			send_string("you are sending 4\n");
 15c:	89 e9       	ldi	r24, 0x99	; 153
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11send_stringPc>
			PORTA=0b00000100;
 164:	0b bb       	out	0x1b, r16	; 27
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	89 ef       	ldi	r24, 0xF9	; 249
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0xa8>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0xb2>
 176:	00 00       	nop
			_delay_ms(320);
			PORTA=0b00000000;
 178:	1b ba       	out	0x1b, r1	; 27
 17a:	b6 cf       	rjmp	.-148    	; 0xe8 <main+0x24>
		}
		else if(data=='5'){
 17c:	85 33       	cpi	r24, 0x35	; 53
 17e:	81 f4       	brne	.+32     	; 0x1a0 <main+0xdc>
			
			send_string("you are sending 5\n");
 180:	8c ea       	ldi	r24, 0xAC	; 172
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11send_stringPc>
			PORTA=0b00000101;
 188:	fb ba       	out	0x1b, r15	; 27
 18a:	2f e1       	ldi	r18, 0x1F	; 31
 18c:	88 e4       	ldi	r24, 0x48	; 72
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0xcc>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0xd6>
 19a:	00 00       	nop
			_delay_ms(420);
			PORTA=0b00000000;
 19c:	1b ba       	out	0x1b, r1	; 27
 19e:	a4 cf       	rjmp	.-184    	; 0xe8 <main+0x24>
		}
		else if(data=='6'){
 1a0:	86 33       	cpi	r24, 0x36	; 54
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <main+0xe2>
 1a4:	a1 cf       	rjmp	.-190    	; 0xe8 <main+0x24>
			
			//send_string("you are sending 6\n");
			PORTA=0b00000110;
 1a6:	eb ba       	out	0x1b, r14	; 27
 1a8:	8b e4       	ldi	r24, 0x4B	; 75
 1aa:	9d e1       	ldi	r25, 0x1D	; 29
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0xe8>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0xee>
 1b2:	00 00       	nop
			_delay_ms(30);
			PORTA=0b00000000;
 1b4:	1b ba       	out	0x1b, r1	; 27
 1b6:	98 cf       	rjmp	.-208    	; 0xe8 <main+0x24>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
