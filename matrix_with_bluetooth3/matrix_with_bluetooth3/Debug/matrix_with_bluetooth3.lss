
matrix_with_bluetooth3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  0000019a  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e5  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000574  00000000  00000000  00000a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000246  00000000  00000000  00000f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031d  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010e  00000000  00000000  000014fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000160b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3e       	cpi	r26, 0xE0	; 224
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ee       	ldi	r26, 0xE0	; 224
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3e       	cpi	r26, 0xE0	; 224
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 cb 00 	jmp	0x196	; 0x196 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int main(void)
{
	/* Replace with your application code */
	
	DDRA = 0xFF;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  96:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x00;
  98:	14 ba       	out	0x14, r1	; 20
  9a:	60 ee       	ldi	r22, 0xE0	; 224
  9c:	70 e0       	ldi	r23, 0x00	; 0
		
		for (int k = 0; k < 1; k++){
			for(int i=0;i<8;i++){
				for(int j=0;j<8;j++){
					if(pattern[i][j] == 1 ){
						char a = (1 << i);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	50 e0       	ldi	r21, 0x00	; 0
	int on = 1;
	while (1)
	{
		//_delay_ms(1000);
		
		if(PINC&0b00000001){
  a2:	98 9b       	sbis	0x13, 0	; 19
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <main+0x46>
			int temp;
			//_delay_ms(1000);
			if(PINC&0b01000000){
  a6:	9e 9b       	sbis	0x13, 6	; 19
  a8:	71 c0       	rjmp	.+226    	; 0x18c <main+0xfa>
  aa:	a0 e6       	ldi	r26, 0x60	; 96
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	ed 01       	movw	r28, r26
			for (int i = 0; i < 8; i++) {
				temp = pattern[i][7];
  b0:	1e 96       	adiw	r26, 0x0e	; 14
  b2:	2d 91       	ld	r18, X+
  b4:	3c 91       	ld	r19, X
  b6:	1f 97       	sbiw	r26, 0x0f	; 15
  b8:	fd 01       	movw	r30, r26
  ba:	3e 96       	adiw	r30, 0x0e	; 14
				for (int j = 6; j >= 0; j-- ) {
					pattern[i][j + 1] = pattern[i][j];
  bc:	92 91       	ld	r25, -Z
  be:	82 91       	ld	r24, -Z
  c0:	93 83       	std	Z+3, r25	; 0x03
  c2:	82 83       	std	Z+2, r24	; 0x02
			int temp;
			//_delay_ms(1000);
			if(PINC&0b01000000){
			for (int i = 0; i < 8; i++) {
				temp = pattern[i][7];
				for (int j = 6; j >= 0; j-- ) {
  c4:	ae 17       	cp	r26, r30
  c6:	bf 07       	cpc	r27, r31
  c8:	c9 f7       	brne	.-14     	; 0xbc <main+0x2a>
					pattern[i][j + 1] = pattern[i][j];
				}
				pattern[i][0] = temp;
  ca:	39 83       	std	Y+1, r19	; 0x01
  cc:	28 83       	st	Y, r18
  ce:	50 96       	adiw	r26, 0x10	; 16
		
		if(PINC&0b00000001){
			int temp;
			//_delay_ms(1000);
			if(PINC&0b01000000){
			for (int i = 0; i < 8; i++) {
  d0:	a6 17       	cp	r26, r22
  d2:	b7 07       	cpc	r27, r23
  d4:	61 f7       	brne	.-40     	; 0xae <main+0x1c>
  d6:	5a c0       	rjmp	.+180    	; 0x18c <main+0xfa>
			}
			//PORTC=PORTC&0b01111111;
			
		}
		
		else if(PINC&0b00000010){
  d8:	99 9b       	sbis	0x13, 1	; 19
  da:	1a c0       	rjmp	.+52     	; 0x110 <main+0x7e>
			int temp;
			if(PINC&0b01000000){
  dc:	9e 9b       	sbis	0x13, 6	; 19
  de:	56 c0       	rjmp	.+172    	; 0x18c <main+0xfa>
  e0:	a0 e6       	ldi	r26, 0x60	; 96
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	ed 01       	movw	r28, r26
			for (int i = 0; i < 8; i++) {
				temp = pattern[i][0];
  e6:	0d 91       	ld	r16, X+
  e8:	1c 91       	ld	r17, X
  ea:	11 97       	sbiw	r26, 0x01	; 1
  ec:	9d 01       	movw	r18, r26
  ee:	22 5f       	subi	r18, 0xF2	; 242
  f0:	3f 4f       	sbci	r19, 0xFF	; 255
  f2:	fd 01       	movw	r30, r26
				for (int j = 0; j < 7; j++ ) {
					pattern[i][j] = pattern[i][j+1];
  f4:	82 81       	ldd	r24, Z+2	; 0x02
  f6:	93 81       	ldd	r25, Z+3	; 0x03
  f8:	81 93       	st	Z+, r24
  fa:	91 93       	st	Z+, r25
		else if(PINC&0b00000010){
			int temp;
			if(PINC&0b01000000){
			for (int i = 0; i < 8; i++) {
				temp = pattern[i][0];
				for (int j = 0; j < 7; j++ ) {
  fc:	2e 17       	cp	r18, r30
  fe:	3f 07       	cpc	r19, r31
 100:	c9 f7       	brne	.-14     	; 0xf4 <main+0x62>
					pattern[i][j] = pattern[i][j+1];
				}
				pattern[i][7] = temp;
 102:	1f 87       	std	Y+15, r17	; 0x0f
 104:	0e 87       	std	Y+14, r16	; 0x0e
 106:	50 96       	adiw	r26, 0x10	; 16
		}
		
		else if(PINC&0b00000010){
			int temp;
			if(PINC&0b01000000){
			for (int i = 0; i < 8; i++) {
 108:	6a 17       	cp	r22, r26
 10a:	7b 07       	cpc	r23, r27
 10c:	59 f7       	brne	.-42     	; 0xe4 <main+0x52>
 10e:	3e c0       	rjmp	.+124    	; 0x18c <main+0xfa>
			}
			//PORTC=PORTC&0b01111111;
			
		}
		
		else if(PINC&0b01000100){
 110:	83 b3       	in	r24, 0x13	; 19
 112:	84 74       	andi	r24, 0x44	; 68
 114:	d9 f1       	breq	.+118    	; 0x18c <main+0xfa>
 116:	a0 e6       	ldi	r26, 0x60	; 96
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	ed 01       	movw	r28, r26
			int temp;
			
			for (int i = 0; i < 8; i++) {
				temp = pattern[i][0];
 11c:	0d 91       	ld	r16, X+
 11e:	1c 91       	ld	r17, X
 120:	11 97       	sbiw	r26, 0x01	; 1
 122:	9d 01       	movw	r18, r26
 124:	22 5f       	subi	r18, 0xF2	; 242
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	fd 01       	movw	r30, r26
				for (int j = 0; j < 7; j++ ) {
					pattern[i][j] = pattern[i][j+1];
 12a:	82 81       	ldd	r24, Z+2	; 0x02
 12c:	93 81       	ldd	r25, Z+3	; 0x03
 12e:	81 93       	st	Z+, r24
 130:	91 93       	st	Z+, r25
		else if(PINC&0b01000100){
			int temp;
			
			for (int i = 0; i < 8; i++) {
				temp = pattern[i][0];
				for (int j = 0; j < 7; j++ ) {
 132:	e2 17       	cp	r30, r18
 134:	f3 07       	cpc	r31, r19
 136:	c9 f7       	brne	.-14     	; 0x12a <main+0x98>
					pattern[i][j] = pattern[i][j+1];
				}
				pattern[i][7] = temp;
 138:	1f 87       	std	Y+15, r17	; 0x0f
 13a:	0e 87       	std	Y+14, r16	; 0x0e
 13c:	50 96       	adiw	r26, 0x10	; 16
		}
		
		else if(PINC&0b01000100){
			int temp;
			
			for (int i = 0; i < 8; i++) {
 13e:	6a 17       	cp	r22, r26
 140:	7b 07       	cpc	r23, r27
 142:	59 f7       	brne	.-42     	; 0x11a <main+0x88>
 144:	23 c0       	rjmp	.+70     	; 0x18c <main+0xfa>
		
		for (int k = 0; k < 1; k++){
			for(int i=0;i<8;i++){
				for(int j=0;j<8;j++){
					if(pattern[i][j] == 1 ){
						char a = (1 << i);
 146:	a4 2f       	mov	r26, r20
 148:	0c 2e       	mov	r0, r28
 14a:	01 c0       	rjmp	.+2      	; 0x14e <main+0xbc>
 14c:	aa 0f       	add	r26, r26
 14e:	0a 94       	dec	r0
 150:	ea f7       	brpl	.-6      	; 0x14c <main+0xba>
 152:	f8 01       	movw	r30, r16
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
		on = 1 - on;
		
		for (int k = 0; k < 1; k++){
			for(int i=0;i<8;i++){
				for(int j=0;j<8;j++){
					if(pattern[i][j] == 1 ){
 158:	21 91       	ld	r18, Z+
 15a:	31 91       	ld	r19, Z+
 15c:	21 30       	cpi	r18, 0x01	; 1
 15e:	31 05       	cpc	r19, r1
 160:	51 f4       	brne	.+20     	; 0x176 <main+0xe4>
						char a = (1 << i);
						char b = (1 << j);
						PORTA = a;
 162:	ab bb       	out	0x1b, r26	; 27
						PORTB = ~b;
 164:	9a 01       	movw	r18, r20
 166:	08 2e       	mov	r0, r24
 168:	02 c0       	rjmp	.+4      	; 0x16e <main+0xdc>
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	0a 94       	dec	r0
 170:	e2 f7       	brpl	.-8      	; 0x16a <main+0xd8>
 172:	20 95       	com	r18
 174:	28 bb       	out	0x18, r18	; 24
		
		on = 1 - on;
		
		for (int k = 0; k < 1; k++){
			for(int i=0;i<8;i++){
				for(int j=0;j<8;j++){
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	88 30       	cpi	r24, 0x08	; 8
 17a:	91 05       	cpc	r25, r1
 17c:	69 f7       	brne	.-38     	; 0x158 <main+0xc6>
		}
		
		on = 1 - on;
		
		for (int k = 0; k < 1; k++){
			for(int i=0;i<8;i++){
 17e:	21 96       	adiw	r28, 0x01	; 1
 180:	00 5f       	subi	r16, 0xF0	; 240
 182:	1f 4f       	sbci	r17, 0xFF	; 255
 184:	c8 30       	cpi	r28, 0x08	; 8
 186:	d1 05       	cpc	r29, r1
 188:	f1 f6       	brne	.-68     	; 0x146 <main+0xb4>
 18a:	8b cf       	rjmp	.-234    	; 0xa2 <main+0x10>
 18c:	00 e6       	ldi	r16, 0x60	; 96
 18e:	10 e0       	ldi	r17, 0x00	; 0
		
		else if(PINC&0b01000100){
			int temp;
			
			for (int i = 0; i < 8; i++) {
				temp = pattern[i][0];
 190:	c0 e0       	ldi	r28, 0x00	; 0
 192:	d0 e0       	ldi	r29, 0x00	; 0
 194:	d8 cf       	rjmp	.-80     	; 0x146 <main+0xb4>

00000196 <_exit>:
 196:	f8 94       	cli

00000198 <__stop_program>:
 198:	ff cf       	rjmp	.-2      	; 0x198 <__stop_program>
