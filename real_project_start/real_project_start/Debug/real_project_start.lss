
real_project_start.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00800060  000001ea  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800160  00800160  0000037e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000617  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000558  00000000  00000000  00000a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000238  00000000  00000000  00000f83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000320  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000103  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001633  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 67 00 	call	0xce	; 0xce <main>
  8a:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_2>:
{0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0},
{0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0},
{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};

ISR(INT1_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	state = 1 - state;
  a4:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <__data_end>
  a8:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <__data_end+0x1>
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	82 1b       	sub	r24, r18
  b2:	93 0b       	sbc	r25, r19
  b4:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__data_end+0x1>
  b8:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
}
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	3f 91       	pop	r19
  c2:	2f 91       	pop	r18
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <main>:

int main(void)
{
	/* Replace with your application code */
	
	DDRA = 0xFF;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  d2:	87 bb       	out	0x17, r24	; 23
	DDRD = 0b00000000;
  d4:	11 ba       	out	0x11, r1	; 17
	
	int c = 0;
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
		
		
			// right shift
			int temp;
			c++;
			c=c%400;
  da:	0f 2e       	mov	r0, r31
  dc:	f0 e9       	ldi	r31, 0x90	; 144
  de:	2f 2e       	mov	r2, r31
  e0:	33 24       	eor	r3, r3
  e2:	33 94       	inc	r3
  e4:	f0 2d       	mov	r31, r0
			int f=0;
  e6:	c1 2c       	mov	r12, r1
  e8:	d1 2c       	mov	r13, r1
			//for(int k=0;k<1000;k++)
			for(int i=0;i<8;i++){
				
				for(int j=0;j<16;j++){
					if(pattern[i][j]==1){
					PORTA = 1<<i;
  ea:	bb 24       	eor	r11, r11
  ec:	b3 94       	inc	r11
						PORTB = j;
						if(c==300){
							pattern[i][j]=0;
							if(pattern[i][j+1]==1)f=1;
							else
							pattern[i][j+1]=2;
  ee:	68 94       	set
  f0:	ee 24       	eor	r14, r14
  f2:	e1 f8       	bld	r14, 1
  f4:	f1 2c       	mov	r15, r1
					if(pattern[i][j]==2){
						PORTA = 1<<i;
						PORTB = j;
						if(c==300){
							pattern[i][j]=0;
							if(pattern[i][j+1]==1)f=1;
  f6:	8b 2c       	mov	r8, r11
  f8:	51 2c       	mov	r5, r1
							else
							pattern[i][j+1]=2;
							c=0;
  fa:	a1 2c       	mov	r10, r1
  fc:	91 2c       	mov	r9, r1
	{
		
		
			// right shift
			int temp;
			c++;
  fe:	01 96       	adiw	r24, 0x01	; 1
			c=c%400;
 100:	b1 01       	movw	r22, r2
 102:	0e 94 cb 00 	call	0x196	; 0x196 <__divmodhi4>
 106:	00 e6       	ldi	r16, 0x60	; 96
 108:	10 e0       	ldi	r17, 0x00	; 0
			int f=0;
			
			//for(int k=0;k<1000;k++)
			for(int i=0;i<8;i++){
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	70 e0       	ldi	r23, 0x00	; 0
		
			// right shift
			int temp;
			c++;
			c=c%400;
			int f=0;
 10e:	2c 2d       	mov	r18, r12
 110:	3d 2d       	mov	r19, r13
			//for(int k=0;k<1000;k++)
			for(int i=0;i<8;i++){
				
				for(int j=0;j<16;j++){
					if(pattern[i][j]==1){
					PORTA = 1<<i;
 112:	6b 2c       	mov	r6, r11
 114:	06 2e       	mov	r0, r22
 116:	01 c0       	rjmp	.+2      	; 0x11a <main+0x4c>
 118:	66 0c       	add	r6, r6
 11a:	0a 94       	dec	r0
 11c:	ea f7       	brpl	.-6      	; 0x118 <main+0x4a>
 11e:	f8 01       	movw	r30, r16
 120:	c0 e0       	ldi	r28, 0x00	; 0
 122:	df 01       	movw	r26, r30
			
			//for(int k=0;k<1000;k++)
			for(int i=0;i<8;i++){
				
				for(int j=0;j<16;j++){
					if(pattern[i][j]==1){
 124:	40 81       	ld	r20, Z
 126:	51 81       	ldd	r21, Z+1	; 0x01
 128:	41 30       	cpi	r20, 0x01	; 1
 12a:	51 05       	cpc	r21, r1
 12c:	11 f4       	brne	.+4      	; 0x132 <main+0x64>
					PORTA = 1<<i;
 12e:	6b ba       	out	0x1b, r6	; 27
					PORTB = j;
 130:	c8 bb       	out	0x18, r28	; 24
					}
					if(!f)
 132:	21 15       	cp	r18, r1
 134:	31 05       	cpc	r19, r1
 136:	11 f5       	brne	.+68     	; 0x17c <main+0xae>
					if(PIND&0b00000001)
 138:	80 9b       	sbis	0x10, 0	; 16
 13a:	20 c0       	rjmp	.+64     	; 0x17c <main+0xae>
					if(pattern[i][j]==2){
 13c:	4d 91       	ld	r20, X+
 13e:	5c 91       	ld	r21, X
 140:	11 97       	sbiw	r26, 0x01	; 1
 142:	42 30       	cpi	r20, 0x02	; 2
 144:	51 05       	cpc	r21, r1
 146:	d1 f4       	brne	.+52     	; 0x17c <main+0xae>
						PORTA = 1<<i;
 148:	6b ba       	out	0x1b, r6	; 27
						PORTB = j;
 14a:	c8 bb       	out	0x18, r28	; 24
						if(c==300){
 14c:	8c 32       	cpi	r24, 0x2C	; 44
 14e:	41 e0       	ldi	r20, 0x01	; 1
 150:	94 07       	cpc	r25, r20
 152:	a1 f4       	brne	.+40     	; 0x17c <main+0xae>
							pattern[i][j]=0;
 154:	11 96       	adiw	r26, 0x01	; 1
 156:	1c 92       	st	X, r1
 158:	1e 92       	st	-X, r1
							if(pattern[i][j+1]==1)f=1;
 15a:	12 96       	adiw	r26, 0x02	; 2
 15c:	8d 91       	ld	r24, X+
 15e:	9c 91       	ld	r25, X
 160:	13 97       	sbiw	r26, 0x03	; 3
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	39 f0       	breq	.+14     	; 0x174 <main+0xa6>
							else
							pattern[i][j+1]=2;
 166:	13 96       	adiw	r26, 0x03	; 3
 168:	fc 92       	st	X, r15
 16a:	ee 92       	st	-X, r14
 16c:	12 97       	sbiw	r26, 0x02	; 2
							c=0;
 16e:	8a 2d       	mov	r24, r10
 170:	99 2d       	mov	r25, r9
 172:	04 c0       	rjmp	.+8      	; 0x17c <main+0xae>
					if(pattern[i][j]==2){
						PORTA = 1<<i;
						PORTB = j;
						if(c==300){
							pattern[i][j]=0;
							if(pattern[i][j+1]==1)f=1;
 174:	28 2d       	mov	r18, r8
 176:	35 2d       	mov	r19, r5
							else
							pattern[i][j+1]=2;
							c=0;
 178:	8a 2d       	mov	r24, r10
 17a:	99 2d       	mov	r25, r9
 17c:	32 96       	adiw	r30, 0x02	; 2
 17e:	cf 5f       	subi	r28, 0xFF	; 255
			int f=0;
			
			//for(int k=0;k<1000;k++)
			for(int i=0;i<8;i++){
				
				for(int j=0;j<16;j++){
 180:	c0 31       	cpi	r28, 0x10	; 16
 182:	79 f6       	brne	.-98     	; 0x122 <main+0x54>
			c++;
			c=c%400;
			int f=0;
			
			//for(int k=0;k<1000;k++)
			for(int i=0;i<8;i++){
 184:	6f 5f       	subi	r22, 0xFF	; 255
 186:	7f 4f       	sbci	r23, 0xFF	; 255
 188:	00 5e       	subi	r16, 0xE0	; 224
 18a:	1f 4f       	sbci	r17, 0xFF	; 255
 18c:	68 30       	cpi	r22, 0x08	; 8
 18e:	71 05       	cpc	r23, r1
 190:	09 f4       	brne	.+2      	; 0x194 <main+0xc6>
 192:	b5 cf       	rjmp	.-150    	; 0xfe <main+0x30>
 194:	be cf       	rjmp	.-132    	; 0x112 <main+0x44>

00000196 <__divmodhi4>:
 196:	97 fb       	bst	r25, 7
 198:	07 2e       	mov	r0, r23
 19a:	16 f4       	brtc	.+4      	; 0x1a0 <__divmodhi4+0xa>
 19c:	00 94       	com	r0
 19e:	07 d0       	rcall	.+14     	; 0x1ae <__divmodhi4_neg1>
 1a0:	77 fd       	sbrc	r23, 7
 1a2:	09 d0       	rcall	.+18     	; 0x1b6 <__divmodhi4_neg2>
 1a4:	0e 94 df 00 	call	0x1be	; 0x1be <__udivmodhi4>
 1a8:	07 fc       	sbrc	r0, 7
 1aa:	05 d0       	rcall	.+10     	; 0x1b6 <__divmodhi4_neg2>
 1ac:	3e f4       	brtc	.+14     	; 0x1bc <__divmodhi4_exit>

000001ae <__divmodhi4_neg1>:
 1ae:	90 95       	com	r25
 1b0:	81 95       	neg	r24
 1b2:	9f 4f       	sbci	r25, 0xFF	; 255
 1b4:	08 95       	ret

000001b6 <__divmodhi4_neg2>:
 1b6:	70 95       	com	r23
 1b8:	61 95       	neg	r22
 1ba:	7f 4f       	sbci	r23, 0xFF	; 255

000001bc <__divmodhi4_exit>:
 1bc:	08 95       	ret

000001be <__udivmodhi4>:
 1be:	aa 1b       	sub	r26, r26
 1c0:	bb 1b       	sub	r27, r27
 1c2:	51 e1       	ldi	r21, 0x11	; 17
 1c4:	07 c0       	rjmp	.+14     	; 0x1d4 <__udivmodhi4_ep>

000001c6 <__udivmodhi4_loop>:
 1c6:	aa 1f       	adc	r26, r26
 1c8:	bb 1f       	adc	r27, r27
 1ca:	a6 17       	cp	r26, r22
 1cc:	b7 07       	cpc	r27, r23
 1ce:	10 f0       	brcs	.+4      	; 0x1d4 <__udivmodhi4_ep>
 1d0:	a6 1b       	sub	r26, r22
 1d2:	b7 0b       	sbc	r27, r23

000001d4 <__udivmodhi4_ep>:
 1d4:	88 1f       	adc	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	5a 95       	dec	r21
 1da:	a9 f7       	brne	.-22     	; 0x1c6 <__udivmodhi4_loop>
 1dc:	80 95       	com	r24
 1de:	90 95       	com	r25
 1e0:	bc 01       	movw	r22, r24
 1e2:	cd 01       	movw	r24, r26
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
