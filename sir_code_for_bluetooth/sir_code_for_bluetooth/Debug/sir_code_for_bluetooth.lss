
sir_code_for_bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000106  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000711  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065f  00000000  00000000  0000095d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e3  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000012a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c1  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cc  00000000  00000000  000016d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000179d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  7a:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z10USART_initv>:
#define F_CPU 1000000
#include <util/delay.h>

void USART_init(void)
{
	UCSRA = 0b00000010;  // double speed
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	8b b9       	out	0x0b, r24	; 11
	UCSRB = 0b00011000;  // Enable Tx and Rx, polling
  86:	88 e1       	ldi	r24, 0x18	; 24
  88:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0b10000110;  // Async mode, no parity, 1 stop bit, 				8 data bits
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
	//in double-speed mode, UBRR = clock/(8xbaud rate) - 1
	UBRRH = 0;
  8e:	10 bc       	out	0x20, r1	; 32
	UBRRL = 12; // Baud rate 9600bps, assuming 1MHz clock
  90:	8c e0       	ldi	r24, 0x0C	; 12
  92:	89 b9       	out	0x09, r24	; 9
  94:	08 95       	ret

00000096 <_Z9UART_sendh>:
}

void UART_send(unsigned char data){
	// wait until UDRE flag is set to logic 1
	while ((UCSRA & (1<<UDRE)) == 0x00);
  96:	5d 9b       	sbis	0x0b, 5	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <_Z9UART_sendh>
	UDR = data; // Write character to UDR for transmission
  9a:	8c b9       	out	0x0c, r24	; 12
  9c:	08 95       	ret

0000009e <_Z12UART_receivev>:
}

unsigned char UART_receive(void){
	// Wait until RXC flag is set to logic 1
	while ((UCSRA & (1<<RXC)) == 0x00);
  9e:	5f 9b       	sbis	0x0b, 7	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <_Z12UART_receivev>
	return UDR; // Read the received character from UDR
  a2:	8c b1       	in	r24, 0x0c	; 12
}
  a4:	08 95       	ret

000000a6 <_Z11send_stringPc>:

void send_string(char * str){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
	int i = 0;
	while(str[i] != '\0'){
  ac:	88 81       	ld	r24, Y
  ae:	88 23       	and	r24, r24
  b0:	31 f0       	breq	.+12     	; 0xbe <_Z11send_stringPc+0x18>
  b2:	21 96       	adiw	r28, 0x01	; 1
		UART_send(str[i]);
  b4:	0e 94 4b 00 	call	0x96	; 0x96 <_Z9UART_sendh>
	return UDR; // Read the received character from UDR
}

void send_string(char * str){
	int i = 0;
	while(str[i] != '\0'){
  b8:	89 91       	ld	r24, Y+
  ba:	81 11       	cpse	r24, r1
  bc:	fb cf       	rjmp	.-10     	; 0xb4 <_Z11send_stringPc+0xe>
		UART_send(str[i]);
		i++;
	}
}
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <main>:


int main(void)
{
	DDRA = 0b11110111;
  c4:	87 ef       	ldi	r24, 0xF7	; 247
  c6:	8a bb       	out	0x1a, r24	; 26
	USART_init(); // initialise USART
  c8:	0e 94 41 00 	call	0x82	; 0x82 <_Z10USART_initv>
	DDRA = 0b11111110;
  cc:	8e ef       	ldi	r24, 0xFE	; 254
  ce:	8a bb       	out	0x1a, r24	; 26
	while (1) {
		
		unsigned char data = UART_receive();
  d0:	0e 94 4f 00 	call	0x9e	; 0x9e <_Z12UART_receivev>
		
		if(data=='1'){
  d4:	81 33       	cpi	r24, 0x31	; 49
  d6:	29 f4       	brne	.+10     	; 0xe2 <main+0x1e>
			send_string("you are sending 1\n");
  d8:	80 e6       	ldi	r24, 0x60	; 96
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11send_stringPc>
  e0:	06 c0       	rjmp	.+12     	; 0xee <main+0x2a>
		}
		else if(data=='2'){
  e2:	82 33       	cpi	r24, 0x32	; 50
  e4:	21 f4       	brne	.+8      	; 0xee <main+0x2a>
			send_string("you are sending 2\n");
  e6:	83 e7       	ldi	r24, 0x73	; 115
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11send_stringPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f e3       	ldi	r18, 0x3F	; 63
  f0:	8d e0       	ldi	r24, 0x0D	; 13
  f2:	93 e0       	ldi	r25, 0x03	; 3
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x30>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x3a>
  fe:	00 00       	nop
 100:	e7 cf       	rjmp	.-50     	; 0xd0 <main+0xc>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
